from aiogram import Router
from aiogram.types import Message, InputFile, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from internal.services.report import generate_sales_report_excel  # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ excel


router = Router()

class SalesRepStates(StatesGroup):
    waiting_for_month = State()


# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ common.py
async def ask_rep_month(message: Message, state: FSMContext):
    await state.set_state(SalesRepStates.waiting_for_month)
    await message.answer(
        "üìÜ –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ –æ—Ç—á—ë—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú.–ì–ì–ì–ì\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 06.2025"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–µ—Å—è—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.message(SalesRepStates.waiting_for_month)
async def process_month_input(message: Message, state: FSMContext):
    text = message.text.strip()
    try:
        month, year = map(int, text.split("."))
        if not (1 <= month <= 12):
            raise ValueError
    except ValueError:
        await message.answer("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ú–ú.–ì–ì–ì–ì")
        return

    await message.answer(f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –∑–∞ {month:02}.{year}...")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞
    try:
        file_path = await generate_sales_report_excel(month, year)
        await message.answer_document(caption="‚úÖ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤!",
                                      document=FSInputFile(path=file_path, filename=f"–û—Ç—á—ë—Ç –∑–∞ {month:02}_{year}.xlsx"))

    except Exception as e:
        await message.answer(f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")

    # –ü–æ—Å–ª–µ –æ—Ç—á—ë—Ç–∞ FSM –æ—á–∏—â–∞–µ—Ç—Å—è
    await state.clear()
