from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from internal.config.config import STORE_PASSWORDS, STORE_INFO
from internal.services.gsheet import append_sales_row
from internal.keyboards.common_kb import get_main_menu
from datetime import datetime

router = Router()


class DirectorStates(StatesGroup):
    waiting_for_password = State()
    waiting_for_date = State()
    waiting_for_sales = State()


async def ask_director_password(message: Message, state: FSMContext):
    data = await state.get_data()
    if "store_id" in data:
        await message.answer("‚úÖ –í—ã —É–∂–µ –≤–æ—à–ª–∏ –∫–∞–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä.\n"
                             "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–¥–∞–∂ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì:\n"
                             "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /logout")
        await state.set_state(DirectorStates.waiting_for_date)
        return

    await state.set_state(DirectorStates.waiting_for_password)
    await message.answer("üîí –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:")


# Logout
@router.message(Command("logout"))
async def logout(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.")

    kb = get_main_menu()
    await message.answer("""
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>
–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:
üëî <b>–î–∏—Ä–µ–∫—Ç–æ—Ä</b> - –≤–≤–æ–¥–∏—Ç–µ –ø—Ä–æ–¥–∞–∂–∏ –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –º–∞–≥–∞–∑–∏–Ω–æ–º.
üõí <b>–¢–æ—Ä–≥–æ–≤—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å</b> -.
–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.
    """,
                         reply_markup=kb,
                         parse_mode="HTML")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
@router.message(DirectorStates.waiting_for_password)
async def check_director_password(message: Message, state: FSMContext):
    password = message.text.strip()
    if password in STORE_PASSWORDS:

        store_id = STORE_PASSWORDS[password]
        store_data = STORE_INFO.get(store_id, {})

        print(f"[INFO] –ù–æ–≤—ã–π –≤—Ö–æ–¥ –≤ –º–∞–≥–∞–∑–∏–Ω —Å id {store_id} –æ—Ç telegram id: {message.from_user.id}.")

        await state.update_data(store_id=store_id)
        await message.answer(f"""‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω

üè¨ –ú–∞–≥–∞–∑–∏–Ω: {store_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} (ID: {store_id})
üìä –ü–ª–∞–Ω—ã –ø–æ —Ñ—Ä—É–∫—Ç–∞–º –∑–∞ –º–µ—Å—è—Ü:
    üçê –ì—Ä—É—à–∏: {store_data.get('pears_plan', 0)}
    üçé –Ø–±–ª–æ–∫–∏: {store_data.get('apples_plan', 0)}
    üçä –ê–ø–µ–ª—å—Å–∏–Ω—ã: {store_data.get('oranges_plan', 0)}
    üçä –ú–∞–Ω–¥–∞—Ä–∏–Ω—ã: {store_data.get('mandarins_plan', 0)}
    üçç –ê–Ω–∞–Ω–∞—Å—ã: {store_data.get('pineapples_plan', 0)}""")
        await message.answer("""üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–¥–∞–∂–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:""")
        await state.set_state(DirectorStates.waiting_for_date)
    else:
        await message.answer("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ /start")
        await state.clear()


# –í–≤–æ–¥ –¥–∞—Ç—ã
@router.message(DirectorStates.waiting_for_date)
async def process_date(message: Message, state: FSMContext):
    date_text = message.text.strip()
    try:
        datetime.strptime(date_text, "%d.%m.%Y")
    except ValueError:
        await message.answer("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.MM.–ì–ì–ì–ì.")
        return

    await state.update_data(date=date_text)
    await message.answer(
        "üìà –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–∞–∂–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–≥—Ä—É—à–∏, —è–±–ª–æ–∫–∏, –∞–ø–µ–ª—å—Å–∏–Ω—ã, –º–∞–Ω–¥–∞—Ä–∏–Ω—ã, –∞–Ω–∞–Ω–∞—Å—ã\n\n"
        "üìÉ –ù–∞–ø—Ä–∏–º–µ—Ä: 12 15 18 10 32"
    )
    await state.set_state(DirectorStates.waiting_for_sales)


# –í–≤–æ–¥ –ø—Ä–æ–¥–∞–∂
@router.message(DirectorStates.waiting_for_sales)
async def process_sales(message: Message, state: FSMContext):
    sales_text = message.text.strip()
    try:
        pears, apples, oranges, mandarins, pineapples = [
            int(x.strip()) for x in sales_text.split(" ")
        ]
    except ValueError:
        await message.answer("‚õî –û—à–∏–±–∫–∞! –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 5 —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
        return

    data = await state.get_data()
    store_id = data.get("store_id")
    date = data.get("date")

    if not store_id or not date:
        await message.answer("‚õî –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ –≤–≤–µ–ª–∏ –¥–∞—Ç—É!")
        await state.clear()
        return

    try:
        print(f"[INFO] –í–Ω–æ—à—É –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É Sales –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {store_id} –∑–∞ {date}...")
        await message.answer("‚è≥ –í–Ω–æ—à—É –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        await append_sales_row(
            date=date,
            store_id=store_id,
            pears=pears,
            apples=apples,
            oranges=oranges,
            mandarins=mandarins,
            pineapples=pineapples,
            user_id=message.from_user.id
        )
        print(f"[INFO] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
    except Exception as e:
        await message.answer(f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ —Å–Ω–æ–≤–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É (–∑–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –≤–≤–æ–¥)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –ø—Ä–æ–¥–∞–∂ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì –∏–ª–∏ /logout –¥–ª—è –≤—ã—Ö–æ–¥–∞:")
    await state.set_state(DirectorStates.waiting_for_date)
